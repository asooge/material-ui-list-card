{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tsuji\\\\Documents\\\\Nirvana_Capital_Management\\\\Software\\\\f1v-code-test\\\\component-challenge\\\\src\\\\components\\\\button\\\\Button.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { Button as Base } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport './Button.scss';\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Button, _Component);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          disabled = _this$props.disabled,\n          disableFocusRipple = _this$props.disableFocusRipple,\n          focusVisibleClassName = _this$props.focusVisibleClassName,\n          fullWidth = _this$props.fullWidth,\n          size = _this$props.size,\n          variant = _this$props.variant,\n          href = _this$props.href,\n          theme = _this$props.theme,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"fullWidth\", \"size\", \"variant\", \"href\", \"theme\"]);\n\n      var themeObj = {};\n\n      switch (theme) {\n        case 'stop':\n          themeObj.class = 'red';\n          themeObj.variant = 'underlined';\n          themeObj.size = 'large';\n          break;\n\n        case 'go':\n          themeObj.class = 'green';\n          themeObj.variant = 'raised';\n          themeObj.size = 'medium';\n          break;\n\n        case 'yield':\n          themeObj.class = 'yellow';\n          themeObj.variant = 'flat';\n          themeObj.size = 'small';\n          break;\n\n        default:\n          themeObj.class = 'default';\n      }\n\n      var classes = classNames('ui-button', className, _defineProperty({}, themeObj.class, [theme]));\n      return React.createElement(Base, Object.assign({\n        className: classes,\n        disabled: disabled,\n        color: color,\n        disableFocusRipple: disableFocusRipple,\n        focusVisibleClassName: focusVisibleClassName,\n        fullWidth: fullWidth,\n        href: href,\n        size: themeObj.size || size,\n        variant: themeObj.variant || variant\n      }, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), children);\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained'])\n};\nButton.defaultProps = {\n  color: 'default',\n  component: 'button',\n  disabled: false,\n  disableFocusRipple: false,\n  fullWidth: false,\n  size: 'medium',\n  type: 'button',\n  variant: 'text'\n};\nexport default Button;","map":{"version":3,"sources":["C:\\Users\\Tsuji\\Documents\\Nirvana_Capital_Management\\Software\\f1v-code-test\\component-challenge\\src\\components\\button\\Button.js"],"names":["React","Component","classNames","Button","Base","PropTypes","props","children","className","color","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","size","variant","href","theme","restProps","themeObj","class","classes","propTypes","node","isRequired","object","string","oneOf","component","elementType","bool","disableRipple","type","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAM,IAAIC,IAAnB,QAA+B,mBAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,eAAP;;IAEMF,M;;;;;;;;;;;;;6BAEK;AAAA,wBAcH,KAAKG,KAdF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILC,KAJK,eAILA,KAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,kBANK,eAMLA,kBANK;AAAA,UAOLC,qBAPK,eAOLA,qBAPK;AAAA,UAQLC,SARK,eAQLA,SARK;AAAA,UASLC,IATK,eASLA,IATK;AAAA,UAULC,OAVK,eAULA,OAVK;AAAA,UAWLC,IAXK,eAWLA,IAXK;AAAA,UAYLC,KAZK,eAYLA,KAZK;AAAA,UAaFC,SAbE;;AAgBP,UAAMC,QAAQ,GAAG,EAAjB;;AAEA,cAAOF,KAAP;AACE,aAAK,MAAL;AACEE,UAAAA,QAAQ,CAACC,KAAT,GAAiB,KAAjB;AACAD,UAAAA,QAAQ,CAACJ,OAAT,GAAmB,YAAnB;AACAI,UAAAA,QAAQ,CAACL,IAAT,GAAgB,OAAhB;AACA;;AACF,aAAK,IAAL;AACEK,UAAAA,QAAQ,CAACC,KAAT,GAAiB,OAAjB;AACAD,UAAAA,QAAQ,CAACJ,OAAT,GAAmB,QAAnB;AACAI,UAAAA,QAAQ,CAACL,IAAT,GAAgB,QAAhB;AACA;;AACF,aAAK,OAAL;AACEK,UAAAA,QAAQ,CAACC,KAAT,GAAiB,QAAjB;AACAD,UAAAA,QAAQ,CAACJ,OAAT,GAAmB,MAAnB;AACAI,UAAAA,QAAQ,CAACL,IAAT,GAAgB,OAAhB;AACA;;AACF;AACEK,UAAAA,QAAQ,CAACC,KAAT,GAAiB,SAAjB;AAjBJ;;AAoBA,UAAMC,OAAO,GAAGnB,UAAU,CAAC,WAAD,EAAcM,SAAd,sBAA2BW,QAAQ,CAACC,KAApC,EAA4C,CAACH,KAAD,CAA5C,EAA1B;AAEA,aACE,oBAAC,IAAD;AACE,QAAA,SAAS,EAAEI,OADb;AAEE,QAAA,QAAQ,EAAEX,QAFZ;AAGE,QAAA,KAAK,EAAED,KAHT;AAIE,QAAA,kBAAkB,EAAEE,kBAJtB;AAKE,QAAA,qBAAqB,EAAEC,qBALzB;AAME,QAAA,SAAS,EAAEC,SANb;AAOE,QAAA,IAAI,EAAEG,IAPR;AAQE,QAAA,IAAI,EAAEG,QAAQ,CAACL,IAAT,IAAiBA,IARzB;AASE,QAAA,OAAO,EAAEK,QAAQ,CAACJ,OAAT,IAAoBA;AAT/B,SAUMG,SAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAYGX,QAZH,CADF;AAgBD;;;;EA1DkBN,S;;AA6DrBE,MAAM,CAACmB,SAAP,GAAmB;AACjB;;;AAGAf,EAAAA,QAAQ,EAAEF,SAAS,CAACkB,IAAV,CAAeC,UAJR;;AAKjB;;;;AAIAH,EAAAA,OAAO,EAAEhB,SAAS,CAACoB,MATF;;AAUjB;;;AAGAjB,EAAAA,SAAS,EAAEH,SAAS,CAACqB,MAbJ;;AAcjB;;;AAGAjB,EAAAA,KAAK,EAAEJ,SAAS,CAACsB,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC,CAAhB,CAjBU;;AAkBjB;;;;AAIAC,EAAAA,SAAS,EAAEvB,SAAS,CAACwB,WAtBJ;;AAuBjB;;;AAGAnB,EAAAA,QAAQ,EAAEL,SAAS,CAACyB,IA1BH;;AA2BjB;;;;AAIAnB,EAAAA,kBAAkB,EAAEN,SAAS,CAACyB,IA/Bb;;AAgCjB;;;AAGAC,EAAAA,aAAa,EAAE1B,SAAS,CAACyB,IAnCR;;AAoCjB;;;AAGAlB,EAAAA,qBAAqB,EAAEP,SAAS,CAACqB,MAvChB;;AAwCjB;;;AAGAb,EAAAA,SAAS,EAAER,SAAS,CAACyB,IA3CJ;;AA4CjB;;;;AAIAd,EAAAA,IAAI,EAAEX,SAAS,CAACqB,MAhDC;;AAiDjB;;;;AAIAZ,EAAAA,IAAI,EAAET,SAAS,CAACsB,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAhB,CArDW;;AAsDjB;;;AAGAK,EAAAA,IAAI,EAAE3B,SAAS,CAACqB,MAzDC;;AA0DjB;;;AAGAX,EAAAA,OAAO,EAAEV,SAAS,CAACsB,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,EAAqB,WAArB,CAAhB;AA7DQ,CAAnB;AAgEAxB,MAAM,CAAC8B,YAAP,GAAsB;AACpBxB,EAAAA,KAAK,EAAE,SADa;AAEpBmB,EAAAA,SAAS,EAAE,QAFS;AAGpBlB,EAAAA,QAAQ,EAAE,KAHU;AAIpBC,EAAAA,kBAAkB,EAAE,KAJA;AAKpBE,EAAAA,SAAS,EAAE,KALS;AAMpBC,EAAAA,IAAI,EAAE,QANc;AAOpBkB,EAAAA,IAAI,EAAE,QAPc;AAQpBjB,EAAAA,OAAO,EAAE;AARW,CAAtB;AAWA,eAAeZ,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { Button as Base } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nimport './Button.scss';\n\nclass Button extends Component {\n\n  render() {\n    const {\n      children,\n      className,\n      color,\n      disabled,\n      disableFocusRipple,\n      focusVisibleClassName,\n      fullWidth,\n      size,\n      variant,\n      href,\n      theme,\n      ...restProps\n    } = this.props;\n\n    const themeObj = {};\n\n    switch(theme) {\n      case 'stop':\n        themeObj.class = 'red';\n        themeObj.variant = 'underlined';\n        themeObj.size = 'large';\n        break;\n      case 'go':\n        themeObj.class = 'green';\n        themeObj.variant = 'raised';\n        themeObj.size = 'medium';\n        break;\n      case 'yield':\n        themeObj.class = 'yellow';\n        themeObj.variant = 'flat';\n        themeObj.size = 'small';\n        break;\n      default:\n        themeObj.class = 'default';\n    }\n\n    const classes = classNames('ui-button', className, {[themeObj.class]: [theme] });\n\n    return (\n      <Base\n        className={classes}\n        disabled={disabled}\n        color={color}\n        disableFocusRipple={disableFocusRipple}\n        focusVisibleClassName={focusVisibleClassName}\n        fullWidth={fullWidth}\n        href={href}\n        size={themeObj.size || size}\n        variant={themeObj.variant || variant}\n        {...restProps}\n      >\n        {children}\n      </Base>\n    );\n  }\n}\n\nButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * @ignore\n   */\n  type: PropTypes.string,\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n};\n\nButton.defaultProps = {\n  color: 'default',\n  component: 'button',\n  disabled: false,\n  disableFocusRipple: false,\n  fullWidth: false,\n  size: 'medium',\n  type: 'button',\n  variant: 'text',\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}